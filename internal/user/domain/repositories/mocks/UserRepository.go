// Code generated by mockery v2.4.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/girigirianish/ems-go/internal/user/domain/entities"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUser(ctx context.Context, user *entities.UserEntity) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserEntity) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserDetail provides a mock function with given fields: ctx, user
func (_m *UserRepository) CreateUserDetail(ctx context.Context, user *entities.UserDetailEntity) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.UserDetailEntity) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllUsersDetail provides a mock function with given fields: ctx
func (_m *UserRepository) GetAllUsersDetail(ctx context.Context) (*[]entities.UserDetailEntity, error) {
	ret := _m.Called(ctx)

	var r0 *[]entities.UserDetailEntity
	if rf, ok := ret.Get(0).(func(context.Context) *[]entities.UserDetailEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.UserDetailEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, email, password
func (_m *UserRepository) GetUser(ctx context.Context, email string, password string) (*entities.UserEntity, error) {
	ret := _m.Called(ctx, email, password)

	var r0 *entities.UserEntity
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entities.UserEntity); ok {
		r0 = rf(ctx, email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.UserEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx
func (_m *UserRepository) GetUsers(ctx context.Context) (*[]entities.UserEntity, error) {
	ret := _m.Called(ctx)

	var r0 *[]entities.UserEntity
	if rf, ok := ret.Get(0).(func(context.Context) *[]entities.UserEntity); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entities.UserEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
